{"version":3,"sources":["redux/reducer.js","components/Note.js","components/CreateNote.js","components/ListOfNotes.js","components/Summary.js","App.js","redux/store.js","index.js"],"names":["addTodoReducer","createSlice","name","initialState","id","created","category","content","date","archived","reducers","addTodos","state","action","push","payload","removeTodos","filter","item","removeAllTodos","console","log","updateTodos","map","todo","completeTodos","actions","reducer","Note","props","updateTodo","removeTodo","completeTodo","isEdit","setIsEdit","useState","isActive","setIsActive","isDisabled","setIsDisabled","colorActive","setColorActive","note","setNote","update","e","prevState","target","value","TableCell","className","Input","sx","color","disabled","disableUnderline","defaultValue","onKeyPress","Box","minWidth","FormControl","fullWidth","Select","variant","onChange","MenuItem","Button","size","onClick","style","connect","todos","dispatch","addTodo","obj","setTodo","isCreate","setIsCreate","handleChange","getDate","d","Date","getMonth","getFullYear","display","justifyContent","m","TableRow","TextField","type","placeholder","required","InputLabel","label","Object","keys","length","alert","Math","floor","random","removeAllTodo","sort","setSort","TableContainer","component","Paper","Table","aria-label","TableHead","backgroundColor","TableBody","taskArchive","taskActive","randomArchive","randomActive","ideaArchive","ideaActive","quoteArchive","quoteActive","App","Container","mt","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.555515e6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n  {\n    id: 221,\n    name: \"Shopping list\",\n    created: \"May 20, 2021\",\n    category: \"Task\",\n    content: \"Tomatoes, bread\",\n    date: \"April 20, 2021\",\n    archived: false,\n  },\n  {\n    id: 222,\n    name: \"The theory of evolushion\",\n    created: \"March 20, 2021\",\n    category: \"Random Thought\",\n    content: \"Coffe bra\",\n    date: \"April 20, 2021\",\n    archived: true,\n  },\n  {\n    id: 223,\n    name: \"New Features\",\n    created: \"June 20, 2021\",\n    category: \"Idea\",\n    content: \"TV show\",\n    date: \"June 20, 2021\",\n    archived: false,\n  },\n  {\n    id: 224,\n    name: \"Shopping list\",\n    created: \"March 20, 2021\",\n    category: \"Quote\",\n    content: \"Tomatoes, bread\",\n    date: \"April 20, 2021\",\n    archived: false,\n  },\n  {\n    id: 225,\n    name: \"The theory of evolushion\",\n    created: \"June 20, 2021\",\n    category: \"Random Thought\",\n    content: \"Coffe bra\",\n    date: \"June 20, 2021\",\n    archived: true,\n  },\n  {\n    id: 226,\n    name: \"New Features\",\n    created: \"August 20, 2021\",\n    category: \"Idea\",\n    content: \"TV show\",\n    date: \"August 20, 2021\",\n    archived: false,\n  },\n];\n\nconst addTodoReducer = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    //here we will write our reducer\n    //Adding todos\n    addTodos: (state, action) => {\n      state.push(action.payload);\n      return state;\n    },\n    //remove todos\n    removeTodos: (state, action) => {\n      return state.filter((item) => item.id !== action.payload);\n    },\n    //remove all todos\n    removeAllTodos: (state, action) => {\n      console.log(state);\n      console.log(action);\n      return (state = []);\n    },\n    //update todos\n    updateTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload.id) {\n          todo = action.payload;\n        }\n        return todo;\n      });\n    },\n    //archived\n    completeTodos: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          return {\n            ...todo,\n            archived: !todo.archived,\n          };\n        }\n        return todo;\n      });\n    },\n  },\n});\n\nexport const {\n  addTodos,\n  removeTodos,\n  removeAllTodos,\n  updateTodos,\n  completeTodos,\n} = addTodoReducer.actions;\nexport const reducer = addTodoReducer.reducer;\n","import React, { useState } from \"react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport {\n  IoCheckmarkDoneSharp,\n  IoArchive,\n  IoTrash,\n  IoClose,\n} from \"react-icons/io5\";\n\nimport { BsChatQuote } from \"react-icons/bs\";\n\nimport Box from \"@mui/material/Box\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\n\nimport { Button, Input, TableCell } from \"@mui/material\";\n\n// Note\nconst Note = (props) => {\n  const { item, updateTodo, removeTodo, completeTodo, isEdit, setIsEdit } =\n    props;\n\n  const [isActive, setIsActive] = useState(false);\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [colorActive, setColorActive] = useState();\n\n  const [note, setNote] = useState({\n    id: \"\",\n    name: \"\",\n    category: \"\",\n    content: \"\",\n    date: \"\",\n    created: \"\",\n    archived: false,\n  });\n\n  function save() {\n    updateTodo(note);\n    setIsActive(false);\n    setIsDisabled(true);\n    setIsEdit(false);\n  }\n\n  function edit(id) {\n    if (isEdit === false) {\n      setIsEdit(true);\n      setIsActive(true);\n      setIsDisabled(false);\n      setNote(item);\n      setColorActive({ color: \"green\" });\n    }\n  }\n\n  const update = (id, e) => {\n    setNote((prevState) => ({ ...prevState, [e.target.name]: e.target.value }));\n  };\n\n  return (\n    <>\n      <TableCell>\n        {item.category === \"\" && <IoArchive className='icon' />}\n        {item.category === \"Task\" && <IoArchive className='icon' />}\n        {item.category === \"Random Thought\" && (\n          <IoCheckmarkDoneSharp className='icon' />\n        )}\n        {item.category === \"Idea\" && <IoClose className='icon' />}\n        {item.category === \"Quote\" && <BsChatQuote className='icon' />}\n      </TableCell>\n\n      <TableCell>\n        <Input\n          name='name'\n          sx={{\n            \"& .Mui-disabled\": {\n              color: \"#aa55ff\",\n            },\n          }}\n          disabled={isDisabled}\n          disableUnderline={true}\n          defaultValue={item.name}\n          onKeyPress={(e) => update(item.id, e)}\n        />\n      </TableCell>\n\n      <TableCell>\n        <Input\n          name='created'\n          disabled={isDisabled}\n          disableUnderline={true}\n          defaultValue={item.created}\n          onKeyPress={(e) => update(item.id, e)}\n        />\n      </TableCell>\n      <TableCell>\n        {isDisabled === false ? (\n          <Box sx={{ minWidth: 40 }}>\n            <FormControl fullWidth>\n              <Select\n                variant='standard'\n                name='category'\n                disabled={isDisabled}\n                defaultValue={item.category}\n                onChange={(e) => update(item.id, e)}\n              >\n                <MenuItem value='Task'>Task</MenuItem>\n                <MenuItem value='Random Thought'>Random Thought</MenuItem>\n                <MenuItem value='Idea'>Idea</MenuItem>\n                <MenuItem value='Quote'>Quote</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        ) : (\n          <Input\n            name='category'\n            disabled={isDisabled}\n            disableUnderline={true}\n            defaultValue={item.category}\n            onChange={(e) => update(item.id, e)}\n          />\n        )}\n      </TableCell>\n      <TableCell>\n        <Input\n          name='content'\n          disabled={isDisabled}\n          disableUnderline={true}\n          defaultValue={item.content}\n          onKeyPress={(e) => update(item.id, e)}\n        />\n      </TableCell>\n      <TableCell>\n        <Input\n          name='date'\n          disabled={isDisabled}\n          disableUnderline={true}\n          defaultValue={item.date}\n          onKeyPress={(e) => update(item.id, e)}\n        />\n      </TableCell>\n      <TableCell>\n        {/* Edit or Save */}\n        {isActive === false ? (\n          <Button\n            size='large'\n            disabled={isEdit}\n            key={item.id}\n            onClick={() => edit(item.id)}\n          >\n            <AiFillEdit />\n          </Button>\n        ) : (\n          <Button key={item.id + 1} style={colorActive} onClick={save}>\n            Save\n          </Button>\n        )}\n      </TableCell>\n      <TableCell>\n        {/* Archive */}\n        <Button disabled={isEdit} onClick={() => completeTodo(item.id)}>\n          <IoArchive />\n        </Button>\n      </TableCell>\n      <TableCell>\n        {/* Remove */}\n        <Button\n          disabled={isEdit}\n          style={{ color: \"red\" }}\n          onClick={() => removeTodo(item.id)}\n        >\n          <IoTrash />\n        </Button>\n      </TableCell>\n    </>\n  );\n};\n\nexport default Note;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodos } from \"../redux/reducer\";\n\nimport {\n  Button,\n  Box,\n  TextField,\n  TableRow,\n  TableCell,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n} from \"@mui/material\";\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (obj) => dispatch(addTodos(obj)),\n  };\n};\n\nconst CreateNote = (props) => {\n  const [todo, setTodo] = useState({});\n\n  const [isCreate, setIsCreate] = useState(false);\n\n  const handleChange = (e) => {\n    setTodo((prevState) => ({ ...prevState, [e.target.name]: e.target.value }));\n  };\n\n  const getDate = () => {\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const d = new Date();\n    let month = months[d.getMonth()];\n    let day = d.getDate();\n    let year = d.getFullYear();\n    return month + \" \" + day + \", \" + year;\n  };\n\n  const create = () => {\n    setIsCreate(true);\n  };\n\n  const add = () => {\n    if (Object.keys(todo).length === 0) {\n      alert(\"Note is Empty\");\n    } else {\n      props.addTodo({\n        id: Math.floor(Math.random() * 1000),\n        name: todo.name,\n        category: todo.category,\n        content: todo.content,\n        date: todo.date,\n        created: getDate(),\n        archived: false,\n      });\n      setIsCreate(false);\n    }\n  };\n\n  return (\n    <>\n      {isCreate === false ? (\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", m: 2 }}>\n          <Button onClick={() => create()}>Cteate Note</Button>\n        </Box>\n      ) : (\n        <TableRow>\n          <TableCell>\n            <TextField\n              type='text'\n              name='name'\n              placeholder='Name'\n              onChange={(e) => handleChange(e)}\n              required\n            />\n          </TableCell>\n          <TableCell>\n            <Box sx={{ minWidth: 120 }}>\n              <FormControl fullWidth>\n                <InputLabel>Category:</InputLabel>\n                <Select\n                  label='Category:'\n                  value={todo.category}\n                  name='category'\n                  onChange={(e) => handleChange(e)}\n                >\n                  <MenuItem value='Task'>Task</MenuItem>\n                  <MenuItem value='Random Thought'>Random Thought</MenuItem>\n                  <MenuItem value='Idea'>Idea</MenuItem>\n                  <MenuItem value='Quote'>Quote</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n          </TableCell>\n\n          <TableCell>\n            <TextField\n              type='text'\n              name='content'\n              placeholder='Content'\n              onChange={(e) => handleChange(e)}\n              required={true}\n            />\n          </TableCell>\n          <TableCell>\n            <TextField\n              type='text'\n              name='date'\n              placeholder='Date'\n              onChange={(e) => handleChange(e)}\n            />\n          </TableCell>\n          <TableCell>\n            <Button className='' onClick={() => add()}>\n              Add Note\n            </Button>\n          </TableCell>\n        </TableRow>\n      )}\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateNote);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  addTodos,\n  completeTodos,\n  removeTodos,\n  removeAllTodos,\n  updateTodos,\n} from \"../redux/reducer\";\nimport Note from \"./Note\";\nimport CreateNote from \"./CreateNote\";\n\nimport {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n} from \"@mui/material\";\n\nimport { IoArchive, IoTrash } from \"react-icons/io5\";\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (obj) => dispatch(addTodos(obj)),\n    removeTodo: (id) => dispatch(removeTodos(id)),\n    removeAllTodo: () => dispatch(removeAllTodos()),\n    updateTodo: (obj) => dispatch(updateTodos(obj)),\n    completeTodo: (id) => dispatch(completeTodos(id)),\n  };\n};\n\n// let note;\n\nconst ListOfNotes = (props) => {\n  const [sort, setSort] = useState(\"all\");\n  const [isEdit, setIsEdit] = useState(false);\n\n  return (\n    <>\n      <h3>List Of Notes</h3>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label='simple table'>\n          <TableHead>\n            <TableRow sx={{ backgroundColor: \"#cceeff\" }}>\n              <TableCell></TableCell>\n              <TableCell>Name</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Category</TableCell>\n              <TableCell>Content</TableCell>\n              <TableCell>Dates</TableCell>\n              <TableCell></TableCell>\n              <TableCell>\n                {sort === \"all\" ? (\n                  <Button\n                    size='large'\n                    disabled={isEdit}\n                    onClick={() => setSort(\"archive\")}\n                  >\n                    <IoArchive />\n                  </Button>\n                ) : (\n                  <Button\n                    size='small'\n                    disabled={isEdit}\n                    onClick={() => setSort(\"all\")}\n                  >\n                    All\n                  </Button>\n                )}\n              </TableCell>\n              <TableCell>\n                <Button\n                  size='large'\n                  style={{ color: \"red\" }}\n                  disabled={isEdit}\n                  onClick={props.removeAllTodo}\n                >\n                  <IoTrash />\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {/* for archive items */}\n            {props.todos.length > 0 && sort === \"archive\"\n              ? props.todos.map((item) => {\n                  return (\n                    item.archived === true && (\n                      <TableRow>\n                        <Note\n                          key={item.id}\n                          item={item}\n                          removeTodo={props.removeTodo}\n                          updateTodo={props.updateTodo}\n                          completeTodo={props.completeTodo}\n                          isEdit={isEdit}\n                          setIsEdit={setIsEdit}\n                        />\n                      </TableRow>\n                    )\n                  );\n                })\n              : null}\n\n            {/* for all items */}\n            {props.todos.length > 0 && sort === \"all\"\n              ? props.todos.map((item) => {\n                  return (\n                    item.archived === false && (\n                      <TableRow>\n                        <Note\n                          key={item.id}\n                          item={item}\n                          removeTodo={props.removeTodo}\n                          updateTodo={props.updateTodo}\n                          completeTodo={props.completeTodo}\n                          isEdit={isEdit}\n                          setIsEdit={setIsEdit}\n                        />\n                      </TableRow>\n                    )\n                  );\n                })\n              : null}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <CreateNote />\n    </>\n  )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfNotes);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { completeTodos } from \"../redux/reducer\";\r\n\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\n\r\nimport TableCell from \"@mui/material/TableCell\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todos: state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    completeTodo: (id) => dispatch(completeTodos(id)),\r\n  };\r\n};\r\n\r\nconst Summary = (props) => {\r\n  let taskArchive = 0,\r\n    taskActive = 0,\r\n    randomArchive = 0,\r\n    randomActive = 0,\r\n    ideaArchive = 0,\r\n    ideaActive = 0,\r\n    quoteArchive = 0,\r\n    quoteActive = 0;\r\n\r\n  props.todos.map((item) => {\r\n    switch (item.category) {\r\n      case \"Task\":\r\n        item.archived ? taskArchive++ : taskActive++;\r\n        break;\r\n      case \"Random Thought\":\r\n        item.archived ? randomArchive++ : randomActive++;\r\n        break;\r\n      case \"Idea\":\r\n        item.archived ? ideaArchive++ : ideaActive++;\r\n        break;\r\n      case \"Quote\":\r\n        item.archived ? quoteArchive++ : quoteActive++;\r\n        break;\r\n      default:\r\n        console.log(\"Nothing\");\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className='displaytodos'>\r\n      <h3>Summary</h3>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table sx={{ minWidth: 650 }} aria-label='simple table'>\r\n          <TableHead>\r\n            <TableRow sx={{ backgroundColor: \"#cceeff\" }}>\r\n              <TableCell>Note Category</TableCell>\r\n              <TableCell>Active</TableCell>\r\n              <TableCell>Archived</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          {props.todos.length > 0 ? (\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell>Task</TableCell> <TableCell>{taskActive}</TableCell>{\" \"}\r\n                <TableCell>{taskArchive}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Random Thought</TableCell>{\" \"}\r\n                <TableCell>{randomActive}</TableCell>\r\n                <TableCell>{randomArchive}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Idea</TableCell> <TableCell>{ideaActive}</TableCell>\r\n                <TableCell>{ideaArchive}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Quote</TableCell>\r\n                <TableCell>{quoteActive}</TableCell>\r\n                <TableCell>{quoteArchive}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          ) : null}\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Summary);\r\n","import \"./css/main.css\";\nimport ListOfNotes from \"./components/ListOfNotes\";\nimport Summary from \"./components/Summary\";\n\nimport { Container } from \"@mui/material\";\n\nfunction App() {\n  return (\n    <Container\n      sx={{\n        mt: \"1rem\",\n      }}\n    >\n      <ListOfNotes />\n      <Summary />\n    </Container>\n  );\n}\n\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./reducer\";\n\nconst store = configureStore({\n  reducer: reducer,\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}